/*
 * -------------------------------------------------
 *  nf-core/rnafusion Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  
  // Options: Tool versions
  star_fusion_version = '1.5.0'
  fusioncatcher_version = '1.00'
  ericscript_version = '0.5.5'
  pizzly_version = '0.37.3'
  squid_version = '1.5'
  fusion_inspector_version = '1.3.1'

  // Options: Building STAR-star_index
  star_index = false
  read_length = 100

  // Options: References
  star_fusion = false
  fusioncatcher = false
  fusion_inspector = false
  ericscript = false
  pizzly = false
  squid = false
  
  // Options: STAR-Fusion
  star_fusion_opt = false

  // Options: FusionCatcher
  fusioncatcher_opt = false
  
  // Options: Pizzly
  pizzly_k = 31

  // Options: fusion-report
  fusion_report_opt = false

  // Defaults
  reads = "data/*{1,2}.fastq.gz"
  singleEnd = false
  igenomes_base = "./iGenomes"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
  readPaths = null
  debug = false

  // Options: download-references.nf
  fusion_report = false
  cosmic_usr = false
  cosmic_passwd = false
  star_fusion_ensembl = false

  // Shared default variables across different scripts
  igenomesIgnore = false
  download_db = false
  outdir = './results'
  tracedir = "${params.outdir}/pipeline_info"

  // Boilerplate options
  name = false
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  email = false
  maxMultiqcEmailFileSize = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  genome = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/rnafusion:1.0.2'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  test { includeConfig 'conf/test.config' }
}

// Load igenomes.config if required
if(!params.igenomesIgnore){
  includeConfig 'conf/igenomes.config'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/rnafusion'
  author = 'Martin Proks'
  homePage = 'https://github.com/nf-core/rnafusion'
  description = 'Nextflow rnafusion analysis pipeline, part of the nf-core community.'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0.2'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
